
const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log("üöÄ Lancement VeegoxChain avec contrat existant");
console.log("==============================================");
console.log("Contrat: 0xF3E1D80dA667D50641f0110F2Bb70882cd16343E");

function runCommand(command, description, options = {}) {
  console.log(`\nüìã ${description}...`);
  try {
    const defaultOptions = { 
      stdio: 'inherit', 
      cwd: path.resolve(__dirname, '..'),
      timeout: 300000,
      shell: true
    };
    
    const mergedOptions = { ...defaultOptions, ...options };
    
    execSync(command, mergedOptions);
    console.log(`‚úÖ ${description} termin√© avec succ√®s`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de ${description}:`, error.message);
    return false;
  }
}

function cleanCache() {
  const cacheDirs = ['cache', 'artifacts', 'node_modules/.cache'];
  
  cacheDirs.forEach(dir => {
    const fullPath = path.join(__dirname, '..', dir);
    if (fs.existsSync(fullPath)) {
      try {
        fs.rmSync(fullPath, { recursive: true, force: true });
        console.log(`üßπ Cache ${dir} nettoy√©`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Impossible de nettoyer ${dir}:`, error.message);
      }
    }
  });
}

async function launchVeegoxChainWithContract() {
  try {
    // V√©rifier les variables d'environnement
    require('dotenv').config();
    
    if (!process.env.ALCHEMY_API_KEY) {
      console.error("‚ùå ALCHEMY_API_KEY manquante dans le fichier .env");
      process.exit(1);
    }
    
    if (!process.env.PRIVATE_KEY) {
      console.error("‚ùå PRIVATE_KEY manquante dans le fichier .env");
      process.exit(1);
    }

    console.log("‚úÖ Variables d'environnement v√©rifi√©es");

    // 1. Nettoyer le cache
    console.log("\nüßπ Nettoyage du cache...");
    cleanCache();

    // 2. Installation des d√©pendances
    if (!runCommand('npm install --no-optional --legacy-peer-deps', 'Installation des d√©pendances')) {
      console.error("‚ùå √âchec de l'installation des d√©pendances");
      process.exit(1);
    }

    // 3. Compilation des contrats
    console.log("\nüî® Compilation des contrats...");
    if (!runCommand('npx hardhat clean', 'Nettoyage Hardhat')) return;
    if (!runCommand('npx hardhat compile --force', 'Compilation forc√©e')) {
      console.error("‚ùå √âchec de la compilation");
      process.exit(1);
    }

    // 4. D√©ploiement avec le contrat existant
    if (!runCommand('npx hardhat run scripts/deploy-with-existing-contract.js --network sepolia', 'D√©ploiement VeegoxChain avec contrat existant')) {
      console.error("‚ùå √âchec du d√©ploiement");
      process.exit(1);
    }

    // 5. Post-traitement
    if (fs.existsSync(path.join(__dirname, '..', 'veegoxchain-deployment.json'))) {
      console.log("\nüìÑ Post-traitement...");
      runCommand('node scripts/post-deployment.js', 'Post-traitement');
    }

    console.log("\nüéâ VeegoxChain avec contrat existant d√©ploy√©e avec succ√®s!");
    console.log("üìä Contrat int√©gr√©: 0xF3E1D80dA667D50641f0110F2Bb70882cd16343E");

  } catch (error) {
    console.error("‚ùå Erreur fatale:", error);
    process.exit(1);
  }
}

launchVeegoxChainWithContract();
