
const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log("üöÄ Lancement automatique de VeegoxChain");
console.log("=====================================");

// Fonction pour ex√©cuter une commande et afficher la sortie
function runCommand(command, description, options = {}) {
  console.log(`\nüìã ${description}...`);
  try {
    const defaultOptions = { 
      stdio: 'inherit', 
      cwd: path.resolve(__dirname, '..'),
      timeout: 300000, // 5 minutes timeout
      windowsHide: true, // Hide window on Windows
      shell: true
    };
    
    const mergedOptions = { ...defaultOptions, ...options };
    
    execSync(command, mergedOptions);
    console.log(`‚úÖ ${description} termin√© avec succ√®s`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de ${description}:`, error.message);
    if (error.stdout) console.log('STDOUT:', error.stdout.toString());
    if (error.stderr) console.log('STDERR:', error.stderr.toString());
    return false;
  }
}

// Fonction pour nettoyer les fichiers de cache
function cleanCache() {
  const cacheDirs = ['cache', 'artifacts', 'node_modules/.cache'];
  
  cacheDirs.forEach(dir => {
    const fullPath = path.join(__dirname, '..', dir);
    if (fs.existsSync(fullPath)) {
      try {
        fs.rmSync(fullPath, { recursive: true, force: true });
        console.log(`üßπ Cache ${dir} nettoy√©`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Impossible de nettoyer ${dir}:`, error.message);
      }
    }
  });
}

async function launchVeegoxChain() {
  try {
    // V√©rifier les variables d'environnement
    require('dotenv').config();
    
    if (!process.env.ALCHEMY_API_KEY) {
      console.error("‚ùå ALCHEMY_API_KEY manquante dans le fichier .env");
      process.exit(1);
    }
    
    if (!process.env.PRIVATE_KEY) {
      console.error("‚ùå PRIVATE_KEY manquante dans le fichier .env");
      process.exit(1);
    }

    console.log("‚úÖ Variables d'environnement v√©rifi√©es");

    // V√©rifier que nous sommes dans le bon r√©pertoire
    const currentDir = process.cwd();
    console.log("üìç R√©pertoire actuel:", currentDir);

    // V√©rifier que les fichiers de contrats existent
    const contractsDir = path.join(__dirname, '..', 'contracts');
    if (!fs.existsSync(contractsDir)) {
      console.error("‚ùå Dossier contracts/ non trouv√©");
      process.exit(1);
    }

    const requiredContracts = [
      'VeegoxConsensus.sol',
      'VeegoxValidator.sol', 
      'VeegoxToken.sol'
    ];

    for (const contract of requiredContracts) {
      const contractPath = path.join(contractsDir, contract);
      if (!fs.existsSync(contractPath)) {
        console.error(`‚ùå Contrat ${contract} non trouv√© dans ${contractsDir}`);
        process.exit(1);
      }
    }

    console.log("‚úÖ Tous les contrats requis sont pr√©sents");

    // 1. Nettoyer le cache
    console.log("\nüßπ Nettoyage du cache...");
    cleanCache();

    // 2. Installation des d√©pendances
    if (!runCommand('npm install --no-optional --legacy-peer-deps', 'Installation des d√©pendances')) {
      console.error("‚ùå √âchec de l'installation des d√©pendances");
      process.exit(1);
    }

    // 3. Compilation des contrats avec retry
    console.log("\nüî® Compilation des contrats...");
    let compilationSuccess = false;
    const maxRetries = 3;
    
    for (let i = 0; i < maxRetries; i++) {
      console.log(`Tentative de compilation ${i + 1}/${maxRetries}...`);
      
      if (runCommand('npx hardhat clean', 'Nettoyage Hardhat', { stdio: 'pipe' })) {
        if (runCommand('npx hardhat compile --force', 'Compilation forc√©e', { stdio: 'inherit' })) {
          compilationSuccess = true;
          break;
        }
      }
      
      if (i < maxRetries - 1) {
        console.log("‚è≥ Attente avant nouvelle tentative...");
        await new Promise(resolve => setTimeout(resolve, 2000));
        cleanCache();
      }
    }

    if (!compilationSuccess) {
      console.error("‚ùå √âchec de la compilation apr√®s plusieurs tentatives");
      process.exit(1);
    }

    // 4. D√©ploiement sur Sepolia
    if (!runCommand('npx hardhat run scripts/deploy-veegoxchain.js --network sepolia', 'D√©ploiement VeegoxChain sur Sepolia')) {
      console.error("‚ùå √âchec du d√©ploiement");
      process.exit(1);
    }

    console.log("\nüéâ VeegoxChain d√©ploy√©e avec succ√®s!");
    console.log("üìÑ V√©rifiez les fichiers g√©n√©r√©s dans le dossier contracts/");

  } catch (error) {
    console.error("‚ùå Erreur fatale:", error);
    process.exit(1);
  }
}

// Lancer le d√©ploiement
launchVeegoxChain();
